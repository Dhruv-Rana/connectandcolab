{"version":3,"sources":["config/index.js","socket/index.js","components/Blogs/NewEntry.js","components/Blogs/Comments.js","components/Blogs/FullPost.js","components/Blogs/index.js","components/Talks/NewTalk.js","components/Talks/ChatTalk.js","components/Talks/index.js","api/index.js","components/Notes/UploadNotes.js","components/CentreButton/index.js","components/Notes/index.js","components/Logout/index.js","components/Home/index.js","assets/colab.jpg","components/Login/index.js","App.js","index.js"],"names":["baseUrl","Socket","io","path","autoConnect","reconnection","cors","origin","transports","NewEntry","props","title","useRef","useQuill","theme","modules","toolbar","align","list","indent","size","header","color","background","clipboard","matchVisual","formats","quill","quillRef","handleClose","useEffect","socket","on","data","console","log","status","displayNotification","removeAllListeners","className","style","marginLeft","type","required","width","onChange","e","current","target","value","height","marginTop","ref","Button","variant","onClick","quillContent","root","innerHTML","n","length","isEmpty","i","j","alert","handlePostSubmit","marginBottom","startIcon","Comments","useState","replyCommentId","setReplyCommentId","reply","setReply","inputRef","children","focus","handleAddReply","emit","postId","parentId","commentBody","comments","tree","push","map","Map","set","commentId","u","get","v","dfs","sort","a","b","timeStamp","Comment","Group","paddingBottom","child","paddingTop","Avatar","src","user","userImage","Content","Author","as","firstName","lastName","Metadata","fontWeight","moment","unix","format","Text","Actions","Action","Form","Ref","innerRef","TextArea","primary","content","labelPosition","icon","renderComments","FullPost","isPostFetched","setIsPostFetched","addComment","setAddComment","commentReply","setCommentReply","postData","setPostData","setComments","postBody","postTitle","commentData","Modal","Body","Card","Header","Grid","columns","Column","textAlign","closePost","Row","readOnly","verticalAlign","Image","avatar","centered","secondary","Spinner","justifySelf","alignSelf","animation","Blogs","state","posts","open","showPost","nextPage","handleOpen","setState","handlePostClick","modalOperations","openModal","closeModal","fetchPosts","pageOffset","pageNumber","this","show","backdrop","keyboard","fullscreen","marginRight","padding","endIcon","overflow","id","dataLength","next","hasMore","loader","endMessage","backgroundColor","display","flexDirection","alignItems","scrollableTarget","post","slice","Description","float","React","NewTalk","users","setUsers","isListLoaded","setIsListLoaded","userData","filter","userId","setModalOpen","chat","setTalkUser","setModalType","dataSource","alt","subtitle","isOnline","date","Date","now","lastOnline","ChatTalk","talkUser","talkId","setTalkId","waitForFirstTalk","setWaitForFirstTalk","setChat","isTalkLoaded","setIsTalkLoaded","message","setMessage","talkData","reverse","newTalkData","newTalk","setNewTalk","recipientUserId","overflowX","cm","margin","Meta","multiline","autoHeight","maxHeight","event","autofocus","placeholder","rightButtons","disabled","input","Talks","setUserId","talks","setTalks","modalOpen","modalType","lastActivity","messageData","findIndex","talk","scrollable","recipientUser","participant","find","lastChat","axios","create","baseURL","withCredentials","UploadNotes","handleSubmit","preventDefault","file","files","formData","FormData","append","headers","handleCancel","onSubmit","accept","CentreButton","item","xs","justifyContent","Notes","notes","setNotes","setOpen","noteId","setNoteId","noteData","dialogClassName","url","Icon","name","note","noteTitle","noteName","noteDescription","Logout","logout","TabPanel","index","other","role","hidden","aria-labelledby","Box","sx","p","Typography","a11yProps","BasicTabs","showModal","modalProps","modalContent","handleChange","newValue","timeoutRef","clearInterval","setInterval","connect","window","location","reload","disconnect","Container","fluid","justifyItems","borderBottom","borderColor","Tabs","aria-label","Tab","label","Login","Logo","clientId","buttonText","onSuccess","login","onFailure","err","cookiePolicy","callback","config","method","JSON","stringify","then","response","catch","error","postRequest","ga_token","emailAddress","res","App","isAuthenticated","setIsAuthenticated","notification","setNotification","isSessionChecked","setIsSessionChecked","checkSession","googleAuthResponse","tokenId","severity","autoHideDuration","Home","Snackbar","onClose","Alert","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.14cf4da2.chunk.js","sourcesContent":["const baseUrl = 'https://localhost:5000'\r\nconst clientId =\r\n  '269477906043-ahu2enkcene3nicbiqhnpiagesg6btck.apps.googleusercontent.com'\r\n\r\nexport { baseUrl, clientId }\r\n","import { io } from 'socket.io-client'\r\nimport { baseUrl } from '../config'\r\n\r\nconst Socket = io(baseUrl, {\r\n  path: '/iohost',\r\n  autoConnect: false,\r\n  reconnection: false,\r\n  cors: {\r\n    origin: '*',\r\n  },\r\n  transports: ['websocket'],\r\n})\r\n\r\nexport default Socket\r\n","import React, { useRef, useEffect } from 'react'\r\nimport { useQuill } from 'react-quilljs'\r\nimport 'quill/dist/quill.snow.css'\r\nimport Button from '@mui/material/Button'\r\nimport DeleteIcon from '@mui/icons-material/Delete'\r\n\r\nimport socket from '../../socket'\r\n\r\nconst NewEntry = (props) => {\r\n  const title = useRef('')\r\n  const theme = 'snow'\r\n\r\n  const modules = {\r\n    toolbar: [\r\n      ['bold', 'italic', 'underline', 'strike'],\r\n      [{ align: [] }],\r\n\r\n      [{ list: 'ordered' }, { list: 'bullet' }],\r\n      [{ indent: '-1' }, { indent: '+1' }],\r\n\r\n      [{ size: ['small', false, 'large', 'huge'] }],\r\n      [{ header: [1, 2, 3, 4, 5, 6, false] }],\r\n      ['link', 'video'],\r\n      [{ color: [] }, { background: [] }],\r\n\r\n      ['clean'],\r\n    ],\r\n    clipboard: {\r\n      matchVisual: false,\r\n    },\r\n  }\r\n\r\n  const formats = [\r\n    'bold',\r\n    'italic',\r\n    'underline',\r\n    'strike',\r\n    'align',\r\n    'list',\r\n    'indent',\r\n    'size',\r\n    'header',\r\n    'link',\r\n    'video',\r\n    'color',\r\n    'background',\r\n    'clean',\r\n  ]\r\n\r\n  const { quill, quillRef } = useQuill({ theme, modules, formats })\r\n\r\n  const handlePost = () => {\r\n    if (title.current === '') {\r\n      alert('Title cannot be Empty!')\r\n      return\r\n    }\r\n\r\n    let quillContent = quill.root.innerHTML\r\n    let n = quillContent.length\r\n    let isEmpty = true\r\n\r\n    for (let i = 0; i < n; ) {\r\n      if (quillContent[i] === '<') {\r\n        let j = i\r\n        while (j < n && quillContent[j] !== '>') {\r\n          j += 1\r\n        }\r\n        i = j + 1\r\n      } else if (quillContent[i] !== ' ') {\r\n        isEmpty = false\r\n        break\r\n      } else {\r\n        i += 1\r\n      }\r\n    }\r\n\r\n    if (isEmpty) {\r\n      alert('Content cannot be empty!')\r\n      return\r\n    }\r\n\r\n    props.handlePostSubmit(title.current, quill.root.innerHTML)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    props.handleClose()\r\n  }\r\n\r\n  useEffect(() => {\r\n    socket.on('POST::CREATE', (data) => {\r\n      console.log('POST::CREATE :', data)\r\n\r\n      if (data.status) {\r\n        props.displayNotification('success', 'Post Created', 3000)\r\n        handleClose()\r\n      } else {\r\n        // TODO:\r\n        // error from server\r\n        // handle data validation\r\n        props.displayNotification('error', 'Invalid Inputs', 5000)\r\n      }\r\n    })\r\n\r\n    return () => {\r\n      socket.removeAllListeners('POST::CREATE')\r\n    }\r\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <form className=\"ui form\" style={{ marginLeft: '10px' }}>\r\n      <label>\r\n        <h3>Title of the post</h3>\r\n      </label>\r\n      <br />\r\n      <input\r\n        type=\"text\"\r\n        required\r\n        style={{ width: '70%' }}\r\n        onChange={(e) => {\r\n          title.current = e.target.value\r\n        }}\r\n      />\r\n      <h3>Content</h3>\r\n      <div style={{ width: '96%', height: 300, marginTop: '10px' }}>\r\n        <div ref={quillRef} />\r\n      </div>\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={handlePost}\r\n        style={{ marginTop: '100px', marginLeft: '10px', marginBottom: '20px' }}\r\n      >\r\n        Post\r\n      </Button>\r\n      <Button\r\n        variant=\"outlined\"\r\n        style={{\r\n          color: 'red',\r\n          marginTop: '100px',\r\n          marginLeft: '20px',\r\n          marginBottom: '20px',\r\n        }}\r\n        startIcon={<DeleteIcon />}\r\n        onClick={handleClose}\r\n      >\r\n        Cancel\r\n      </Button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default NewEntry\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { Button, Comment, Form, Ref } from 'semantic-ui-react'\r\nimport moment from 'moment'\r\n\r\nimport socket from '../../socket'\r\n\r\nconst Comments = (props) => {\r\n  const [replyCommentId, setReplyCommentId] = useState(null)\r\n  const [reply, setReply] = useState('')\r\n\r\n  const inputRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    if (replyCommentId) {\r\n      inputRef.current && inputRef.current.children[0].focus()\r\n    }\r\n  }, [replyCommentId])\r\n\r\n  const handleAddReply = () => {\r\n    if (reply === '') {\r\n      alert('Comment cannot be empty!')\r\n      return\r\n    }\r\n    socket.emit('POST::ADD_COMMENT', {\r\n      postId: props.postId,\r\n      parentId: replyCommentId,\r\n      commentBody: reply,\r\n    })\r\n    setReply('')\r\n    setReplyCommentId(null)\r\n  }\r\n\r\n  const renderComments = (postId, comments) => {\r\n    if (comments.length === 0) {\r\n      return ''\r\n    }\r\n    if (postId === null) {\r\n      return ''\r\n    }\r\n    const n = comments.length\r\n    const tree = []\r\n    for (let i = 0; i < n + 1; i++) {\r\n      tree.push([])\r\n    }\r\n    let map = new Map()\r\n    for (let i = 0; i < n; i++) {\r\n      map.set(comments[i].commentId, i)\r\n    }\r\n    map.set(postId, n)\r\n    for (let i = 0; i < n; i++) {\r\n      let u = map.get(comments[i].commentId)\r\n      let v = map.get(comments[i].parentId)\r\n      tree[v].push(u)\r\n    }\r\n\r\n    const dfs = (u) => {\r\n      tree[u].sort((a, b) => {\r\n        return a.timeStamp < b.timeStamp\r\n      })\r\n\r\n      return (\r\n        <Comment.Group\r\n          style={{ paddingBottom: 0, marginTop: 2, marginBottom: 2 }}\r\n        >\r\n          {tree[u].map((child) => {\r\n            return (\r\n              <Comment\r\n                style={{\r\n                  paddingBottom: 0,\r\n                  paddingTop: 0,\r\n                  marginTop: 2,\r\n                  marginBottom: 2,\r\n                }}\r\n                key={comments[child].commentId}\r\n              >\r\n                <Comment.Avatar src={comments[child].user.userImage} />\r\n                <Comment.Content>\r\n                  <Comment.Author as=\"span\">{`${comments[child].user.firstName} ${comments[child].user.lastName}`}</Comment.Author>\r\n                  <Comment.Metadata>\r\n                    <span style={{ fontWeight: 700 }}>\r\n                      {moment\r\n                        .unix(comments[child].timeStamp / 1000)\r\n                        .format('HH:mm  DD/MM/YYYY')}\r\n                    </span>\r\n                  </Comment.Metadata>\r\n                  <Comment.Text>{comments[child].commentBody}</Comment.Text>\r\n                  <Comment.Actions>\r\n                    <Comment.Action\r\n                      onClick={() =>\r\n                        setReplyCommentId(comments[child].commentId)\r\n                      }\r\n                    >\r\n                      <span style={{ fontWeight: 700 }}>Reply</span>\r\n                    </Comment.Action>\r\n                  </Comment.Actions>\r\n                  {replyCommentId === comments[child].commentId ? (\r\n                    <Form>\r\n                      <Ref innerRef={inputRef}>\r\n                        <Form.TextArea\r\n                          onChange={(e) => setReply(e.target.value)}\r\n                        />\r\n                      </Ref>\r\n                      <Button\r\n                        primary\r\n                        type={'button'}\r\n                        content=\"Add Reply\"\r\n                        labelPosition=\"left\"\r\n                        icon=\"edit\"\r\n                        onClick={handleAddReply}\r\n                      />\r\n                      <Button\r\n                        color=\"red\"\r\n                        type={'button'}\r\n                        content=\"Cancel\"\r\n                        onClick={() => {\r\n                          setReply('')\r\n                          setReplyCommentId(null)\r\n                        }}\r\n                      />\r\n                    </Form>\r\n                  ) : null}\r\n                </Comment.Content>\r\n                {dfs(child)}\r\n              </Comment>\r\n            )\r\n          })}\r\n        </Comment.Group>\r\n      )\r\n    }\r\n\r\n    return dfs(n)\r\n  }\r\n\r\n  return renderComments(props.postId, props.comments)\r\n}\r\n\r\nexport default Comments\r\n","import React, { useState, useEffect, useRef } from 'react'\r\n\r\nimport { Button, Form, Card, Grid, Image, Ref } from 'semantic-ui-react'\r\nimport { Modal, Spinner } from 'react-bootstrap'\r\n\r\nimport ReactQuill from 'react-quill'\r\nimport 'react-quill/dist/quill.snow.css'\r\n\r\nimport moment from 'moment'\r\n\r\nimport Comments from './Comments'\r\n\r\nimport socket from '../../socket'\r\n\r\nconst FullPost = (props) => {\r\n  const postId = props.postId\r\n\r\n  const [isPostFetched, setIsPostFetched] = useState(false)\r\n\r\n  const [addComment, setAddComment] = useState(false)\r\n  const [commentReply, setCommentReply] = useState('')\r\n\r\n  const [postData, setPostData] = useState({})\r\n  const [comments, setComments] = useState([])\r\n\r\n  const inputRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    socket.on('POST::GET', (data) => {\r\n      console.log('POST::GET :', data)\r\n      if (data.status) {\r\n        let { comments, postBody, postId, postTitle, timeStamp, user } =\r\n          data.postData\r\n        setPostData({ postBody, postId, postTitle, timeStamp, user })\r\n        setComments([...comments])\r\n        setIsPostFetched(true)\r\n      } else {\r\n        // TODO: handle false if any\r\n      }\r\n    })\r\n\r\n    socket.on('POST::ADD_COMMENT', (data) => {\r\n      console.log('POST::ADD_COMMENT :', data)\r\n    })\r\n\r\n    return () => {\r\n      socket.removeAllListeners('POST::GET')\r\n      socket.removeAllListeners('POST::ADD_COMMENT')\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    socket.on(`POST::ADD_COMMENT::${postId}`, (data) => {\r\n      console.log(`POST::ADD_COMMENT::${postId} :`, data)\r\n      setComments([...comments, data.commentData])\r\n    })\r\n\r\n    return () => {\r\n      socket.removeAllListeners(`POST::ADD_COMMENT::${postId}`)\r\n    }\r\n  }, [comments]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (addComment) {\r\n      inputRef.current && inputRef.current.children[0].focus()\r\n    }\r\n  }, [addComment])\r\n\r\n  useEffect(() => {\r\n    socket.emit('POST::GET', { postId })\r\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const handlePostComment = () => {\r\n    if (commentReply === '') {\r\n      alert('Comment cannot be Empty!')\r\n      return\r\n    }\r\n    socket.emit('POST::ADD_COMMENT', {\r\n      postId,\r\n      parentId: postId,\r\n      commentBody: commentReply,\r\n    })\r\n    setCommentReply('')\r\n    setAddComment(false)\r\n  }\r\n\r\n  return (\r\n    <Modal.Body>\r\n      {isPostFetched ? (\r\n        <Card style={{ width: '100%' }}>\r\n          <Card.Header>{}</Card.Header>\r\n          <Card.Content>\r\n            <Grid columns={2}>\r\n              <Grid.Column>\r\n                <h2>Title : {postData.postTitle}</h2>\r\n              </Grid.Column>\r\n              <Grid.Column textAlign={'right'}>\r\n                <Button primary onClick={props.closePost}>\r\n                  Return to All Posts\r\n                </Button>\r\n              </Grid.Column>\r\n            </Grid>\r\n            <hr />\r\n            <Grid columns={1}>\r\n              <Grid.Column>\r\n                <Grid.Row>\r\n                  <h3>Content : </h3>\r\n                </Grid.Row>\r\n                <br />\r\n                <Grid.Row>\r\n                  <ReactQuill\r\n                    theme={'snow'}\r\n                    value={postData.postBody}\r\n                    readOnly={true}\r\n                    modules={{ toolbar: false }}\r\n                  />\r\n                </Grid.Row>\r\n              </Grid.Column>\r\n            </Grid>\r\n            <hr />\r\n            <Grid columns={8}>\r\n              <Grid.Column textAlign={'right'} verticalAlign={'middle'}>\r\n                <h4>User : </h4>\r\n              </Grid.Column>\r\n              <Grid.Column textAlign={'center'} verticalAlign={'middle'}>\r\n                <Image\r\n                  // TODO: remove default url\r\n                  avatar={true}\r\n                  centered={true}\r\n                  size={'massive'}\r\n                  src={postData.user.userImage}\r\n                  className={'p-1'}\r\n                />\r\n              </Grid.Column>\r\n              <Grid.Column textAlign={'left'} verticalAlign={'middle'}>\r\n                <h5>\r\n                  {`${postData.user.firstName} ${postData.user.lastName || ''}`}\r\n                </h5>\r\n              </Grid.Column>\r\n              <Grid.Column>{''}</Grid.Column>\r\n              <Grid.Column>{''}</Grid.Column>\r\n              <Grid.Column>{''}</Grid.Column>\r\n              <Grid.Column textAlign={'right'} verticalAlign={'middle'}>\r\n                <b>{moment.unix(postData.timeStamp / 1000).format('HH:mm')}</b>\r\n              </Grid.Column>\r\n              <Grid.Column textAlign={'left'} verticalAlign={'middle'}>\r\n                <b>\r\n                  {moment.unix(postData.timeStamp / 1000).format('DD/MM/YYYY')}\r\n                </b>\r\n              </Grid.Column>\r\n            </Grid>\r\n            <hr />\r\n            <Grid columns={3}>\r\n              <Grid.Column>\r\n                <h3>Comments : </h3>\r\n              </Grid.Column>\r\n              <Grid.Column>\r\n                {addComment ? (\r\n                  <Form>\r\n                    <Ref innerRef={inputRef}>\r\n                      <Form.TextArea\r\n                        onChange={(e) => setCommentReply(e.target.value)}\r\n                      />\r\n                    </Ref>\r\n                    <Button\r\n                      primary\r\n                      content=\"Add\"\r\n                      size={'small'}\r\n                      onClick={handlePostComment}\r\n                    />\r\n                  </Form>\r\n                ) : null}\r\n              </Grid.Column>\r\n              <Grid.Column textAlign={'right'}>\r\n                <Button\r\n                  color={addComment ? 'red' : 'blue'}\r\n                  secondary={!addComment}\r\n                  onClick={() => {\r\n                    setAddComment(!addComment)\r\n                  }}\r\n                >\r\n                  {!addComment ? 'Write Comment' : 'Cancel'}\r\n                </Button>\r\n              </Grid.Column>\r\n            </Grid>\r\n            <hr />\r\n            <Grid columns={'equal'}>\r\n              <Grid.Column width={1}>{''}</Grid.Column>\r\n              <Grid.Column width={12}>\r\n                <Comments comments={comments} postId={postId} />\r\n              </Grid.Column>\r\n            </Grid>\r\n            <hr />\r\n          </Card.Content>\r\n        </Card>\r\n      ) : (\r\n        <Spinner\r\n          style={{ justifySelf: 'center', alignSelf: 'center' }}\r\n          animation=\"border\"\r\n          variant=\"info\"\r\n        />\r\n      )}\r\n    </Modal.Body>\r\n  )\r\n}\r\n\r\nexport default FullPost\r\n","import * as React from 'react'\r\nimport { Button } from '@mui/material'\r\nimport AddIcon from '@mui/icons-material/Add'\r\nimport Modal from 'react-bootstrap/Modal'\r\n//import axios from 'axios'\r\nimport { Card, Image, Grid } from 'semantic-ui-react'\r\nimport moment from 'moment'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\n\r\nimport NewEntry from './NewEntry'\r\nimport FullPost from './FullPost'\r\nimport socket from '../../socket'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nclass Blogs extends React.Component {\r\n  state = {\r\n    posts: [],\r\n    open: false,\r\n    showPost: null,\r\n    nextPage: 1,\r\n  }\r\n\r\n  handleOpen = () => {\r\n    this.setState({\r\n      open: !this.state.open,\r\n    })\r\n  }\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      open: false,\r\n    })\r\n  }\r\n\r\n  handlePostSubmit = (postTitle, postBody) => {\r\n    console.log('emit POST::CREATE :', postTitle, postBody)\r\n    let data = {\r\n      postTitle,\r\n      postBody,\r\n    }\r\n    socket.emit('POST::CREATE', data)\r\n  }\r\n\r\n  handlePostClick = (postId) => {\r\n    this.props.modalOperations.openModal(\r\n      <FullPost\r\n        postId={postId}\r\n        closePost={this.props.modalOperations.closeModal}\r\n      />\r\n    )\r\n  }\r\n\r\n  fetchPosts = () => {\r\n    let data = {\r\n      pageOffset: this.state.posts.length,\r\n    }\r\n    socket.emit('POST::LIST', data)\r\n    console.log(\r\n      `Emitting => POST::LIST\r\n    data :`,\r\n      data\r\n    )\r\n  }\r\n\r\n  async componentDidMount() {\r\n    socket.on('POST::NEW', (data) => {\r\n      console.log('POST::NEW :', data)\r\n      this.setState({\r\n        posts: [data.postData, ...this.state.posts],\r\n        pageOffset: (this.state.pageOffset + 1) % 20,\r\n      })\r\n    })\r\n\r\n    socket.on('POST::LIST', (data) => {\r\n      console.log('POST::LIST :', data)\r\n      this.setState({\r\n        posts: [...this.state.posts, ...data.posts],\r\n        pageNumber: this.state.pageNumber + 1,\r\n        nextPage: data.nextPage,\r\n      })\r\n    })\r\n\r\n    this.fetchPosts()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    socket.removeAllListeners('POST::LIST')\r\n    socket.removeAllListeners('POST::NEW')\r\n    // socket.removeAllListeners('POST::CREATE')\r\n  }\r\n\r\n  render() {\r\n    const postId = this.state.showPost\r\n    const open = this.state.open\r\n\r\n    return (\r\n      <div\r\n        style={{\r\n          height: '100vh',\r\n        }}\r\n      >\r\n        <Modal show={open} backdrop={true} keyboard={false} animation={false}>\r\n          <Modal.Body>\r\n            <NewEntry\r\n              displayNotification={this.props.displayNotification}\r\n              handleClose={this.handleClose}\r\n              handlePostSubmit={this.handlePostSubmit}\r\n            />\r\n          </Modal.Body>\r\n        </Modal>\r\n        <Modal\r\n          show={postId !== null}\r\n          fullscreen={true}\r\n          backdrop={true}\r\n          keyboard={false}\r\n          animation={false}\r\n          style={{ width: '100%' }}\r\n        >\r\n          <Modal.Body>\r\n            <FullPost postId={postId} />\r\n          </Modal.Body>\r\n        </Modal>\r\n        <div\r\n          style={{\r\n            textAlign: 'center',\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto',\r\n            width: '100%',\r\n            padding: '5px',\r\n            height: '100%',\r\n          }}\r\n        >\r\n          <Button\r\n            variant=\"contained\"\r\n            endIcon={<AddIcon />}\r\n            onClick={this.handleOpen}\r\n          >\r\n            Write New Post\r\n          </Button>\r\n          <br />\r\n          <br />\r\n          <div\r\n            style={{\r\n              height: '100%',\r\n              overflow: 'auto',\r\n            }}\r\n            id=\"scrollablePostDiv\"\r\n          >\r\n            <InfiniteScroll\r\n              dataLength={this.state.posts.length}\r\n              next={this.fetchPosts}\r\n              hasMore={this.state.nextPage !== null}\r\n              loader={<h4>Loading...</h4>}\r\n              endMessage={\r\n                <div style={{ textAlign: 'center' }}>\r\n                  <b>Yay! You have seen it all</b>\r\n                </div>\r\n              }\r\n              style={{\r\n                backgroundColor: 'whitesmoke',\r\n                padding: '10px',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                overflow: false,\r\n                height: '100%',\r\n              }}\r\n              scrollableTarget=\"scrollablePostDiv\"\r\n            >\r\n              {this.state.posts.map((post) => {\r\n                let postTitle = post.postTitle\r\n                if (postTitle.length > 100) {\r\n                  postTitle = postTitle.slice(0, 100) + '...'\r\n                }\r\n                return (\r\n                  <Card\r\n                    key={post.postId}\r\n                    color=\"red\"\r\n                    style={{\r\n                      width: '60%',\r\n                      display: 'flex',\r\n                      marginBottom: 5,\r\n                    }}\r\n                  >\r\n                    <Card.Content header={postTitle} />\r\n                    <Card.Description>\r\n                      <Grid columns=\"two\">\r\n                        <Grid.Column textAlign={'center'}>\r\n                          <Grid.Row>\r\n                            <Image\r\n                              avatar={true}\r\n                              centered={true}\r\n                              size={'massive'}\r\n                              src={post.user.userImage}\r\n                              className={'p-1'}\r\n                            />\r\n                          </Grid.Row>\r\n                          <Grid.Row>\r\n                            <span\r\n                              style={{ float: 'left' }}\r\n                            >{`${post.user.firstName} ${post.user.lastName}`}</span>\r\n                          </Grid.Row>\r\n                        </Grid.Column>\r\n                        <Grid.Column textAlign={'center'}>\r\n                          <Grid.Row>\r\n                            <div>\r\n                              {moment\r\n                                .unix(post.timeStamp / 1000)\r\n                                .format('HH:mm DD/MM/YYYY')}\r\n                            </div>\r\n                          </Grid.Row>\r\n                          <Grid.Row>\r\n                            <Button\r\n                              variant=\"contained\"\r\n                              onClick={() => this.handlePostClick(post.postId)}\r\n                              size={'medium'}\r\n                              style={{ width: '80%' }}\r\n                            >\r\n                              View Post\r\n                            </Button>\r\n                          </Grid.Row>\r\n                        </Grid.Column>\r\n                      </Grid>\r\n                    </Card.Description>\r\n                  </Card>\r\n                )\r\n              })}\r\n            </InfiniteScroll>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Blogs\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport { ChatList } from 'react-chat-elements'\r\nimport { Grid, Button, Card } from 'semantic-ui-react'\r\nimport { Modal, Spinner } from 'react-bootstrap'\r\n\r\nimport 'react-chat-elements/dist/main.css'\r\n\r\nimport socket from '../../socket'\r\n\r\nconst NewTalk = (props) => {\r\n  const [users, setUsers] = useState([])\r\n  const [isListLoaded, setIsListLoaded] = useState(false)\r\n\r\n  useEffect(() => {\r\n    socket.on('USER::LIST', (data) => {\r\n      console.log('USER::LIST :', data)\r\n      if (data.status) {\r\n        let userData = data.userData.filter(\r\n          (user) => user.userId !== props.userId\r\n        )\r\n        setUsers([...userData])\r\n        setIsListLoaded(true)\r\n      } else {\r\n        // TODO: handle false\r\n      }\r\n    })\r\n\r\n    return () => {\r\n      socket.removeAllListeners('USER::LIST')\r\n    }\r\n  }, [props.userId])\r\n\r\n  useEffect(() => {\r\n    socket.emit('USER::LIST', {})\r\n  }, [])\r\n\r\n  return (\r\n    <Modal.Body>\r\n      <Card style={{ width: '100%' }}>\r\n        <Card.Content>\r\n          <Grid columns={2}>\r\n            <Grid.Column>\r\n              <h3>Select User To Start Talk</h3>\r\n            </Grid.Column>\r\n            <Grid.Column textAlign={'right'}>\r\n              <Button color={'red'} onClick={() => props.setModalOpen(false)}>\r\n                Cancel\r\n              </Button>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Card.Content>\r\n        <Card.Content>\r\n          {isListLoaded ? (\r\n            <ChatList\r\n              onClick={(chat) => {\r\n                props.setTalkUser(chat.userData)\r\n                props.setModalType(0)\r\n                props.setModalOpen(true)\r\n              }}\r\n              dataSource={users.map((user) => {\r\n                return {\r\n                  avatar: user.userImage,\r\n                  alt: user.firstName + ' ' + user.lastName,\r\n                  title: user.firstName + ' ' + user.lastName,\r\n                  subtitle: user.isOnline ? 'Online' : 'Offline',\r\n                  date: user.isOnline ? Date.now() : user.lastOnline,\r\n                  userId: user.userId,\r\n                  userData: user,\r\n                }\r\n              })}\r\n            />\r\n          ) : (\r\n            <Spinner animation={'border'} />\r\n          )}\r\n        </Card.Content>\r\n      </Card>\r\n    </Modal.Body>\r\n  )\r\n}\r\n\r\nexport default NewTalk\r\n","import React, { useState, useEffect, useRef } from 'react'\r\n\r\nimport { Input } from 'react-chat-elements'\r\nimport { Grid, Button, Card, Image } from 'semantic-ui-react'\r\nimport { Modal, Spinner } from 'react-bootstrap'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\n\r\nimport 'react-chat-elements/dist/main.css'\r\n\r\nimport socket from '../../socket'\r\nimport moment from 'moment'\r\n\r\nconst ChatTalk = (props) => {\r\n  const talkUser = props.talkUser\r\n  const [talkId, setTalkId] = useState(props.talkId)\r\n  const [waitForFirstTalk, setWaitForFirstTalk] = useState(!props.talkId)\r\n  const [chat, setChat] = useState([])\r\n  const [isTalkLoaded, setIsTalkLoaded] = useState(false)\r\n\r\n  const [message, setMessage] = useState('')\r\n\r\n  const inputRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    socket.on('TALK::GET', (data) => {\r\n      console.log('TALK::GET :', data)\r\n      if (data.status) {\r\n        setChat([...data.talkData.chat.reverse()])\r\n        setIsTalkLoaded(true)\r\n      } else {\r\n        setIsTalkLoaded(true)\r\n      }\r\n    })\r\n\r\n    return () => {\r\n      socket.removeAllListeners('TALK::GET')\r\n    }\r\n  }, [props.userId])\r\n\r\n  useEffect(() => {\r\n    socket.on('TALK::SEND', (data) => {\r\n      console.log('TALK::SEND :', data)\r\n    })\r\n\r\n    return () => {\r\n      socket.removeAllListeners('TALK::SEND')\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    let newTalkData = props.newTalk\r\n    if (waitForFirstTalk && newTalkData) {\r\n      setChat([newTalkData])\r\n      setWaitForFirstTalk(false)\r\n      setTalkId(newTalkData.talkId)\r\n      props.setTalkId(newTalkData.talkId)\r\n      props.setNewTalk(null)\r\n    } else {\r\n      if (newTalkData && newTalkData.talkId === talkId) {\r\n        setChat([newTalkData, ...chat])\r\n        props.setNewTalk(null)\r\n      }\r\n    }\r\n  }, [chat, props, props.newTalk, talkId, waitForFirstTalk])\r\n\r\n  useEffect(() => {\r\n    socket.emit('TALK::GET', { recipientUserId: talkUser.userId })\r\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <Modal.Body>\r\n      <Card style={{ width: '100%' }}>\r\n        <Card.Content>\r\n          <Grid columns={2}>\r\n            <Grid.Column>\r\n              <Grid columns={4}>\r\n                <Grid.Column textAlign={'center'} verticalAlign={'middle'}>\r\n                  <Image\r\n                    // TODO: remove default url\r\n                    avatar={true}\r\n                    centered={true}\r\n                    size={'massive'}\r\n                    src={talkUser.userImage}\r\n                    className={'p-1'}\r\n                  />\r\n                </Grid.Column>\r\n                <Grid.Column textAlign={'right'} verticalAlign={'middle'}>\r\n                  <h5>{`${talkUser.firstName}`}</h5>\r\n                </Grid.Column>\r\n                <Grid.Column textAlign={'left'} verticalAlign={'middle'}>\r\n                  <h5>{`${talkUser.lastName || ''}`}</h5>\r\n                </Grid.Column>\r\n                <Grid.Column>{''}</Grid.Column>\r\n              </Grid>\r\n            </Grid.Column>\r\n            <Grid.Column textAlign={'right'}>\r\n              <Button\r\n                primary\r\n                onClick={() => {\r\n                  props.setTalkId(null)\r\n                  props.setModalOpen(false)\r\n                }}\r\n              >\r\n                Back To Talks\r\n              </Button>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Card.Content>\r\n        <Card.Content>\r\n          {isTalkLoaded ? (\r\n            <div\r\n              style={{\r\n                height: 450,\r\n                overflow: 'auto',\r\n                display: 'flex',\r\n                flexDirection: 'column-reverse',\r\n              }}\r\n              className={'w-100'}\r\n              id=\"scrollablePostDiv\"\r\n            >\r\n              <InfiniteScroll\r\n                className={'w-100'}\r\n                dataLength={chat.length}\r\n                hasMore={false}\r\n                loader={<></>}\r\n                next={() => {}}\r\n                scrollableTarget={'scrollablePostDiv'}\r\n                style={{\r\n                  padding: 10,\r\n                  width: '100%',\r\n                  height: 450,\r\n                  overflowX: 'hidden',\r\n                  display: 'flex',\r\n                  flexDirection: 'column-reverse',\r\n                }}\r\n              >\r\n                {chat.map((cm, i) => {\r\n                  return (\r\n                    <Grid columns={1} key={i}>\r\n                      <Grid.Column className={'w-100 mt-3 mb-0'}>\r\n                        <Card\r\n                          style={{\r\n                            float:\r\n                              cm.user !== talkUser.userId ? 'right' : 'left',\r\n                          }}\r\n                        >\r\n                          <Card.Content\r\n                            textAlign={\r\n                              cm.user !== talkUser.userId ? 'right' : 'left'\r\n                            }\r\n                            style={{\r\n                              backgroundColor: 'whitesmoke',\r\n                              margin: 0,\r\n                            }}\r\n                          >\r\n                            <h4>{cm.message}</h4>\r\n                          </Card.Content>\r\n                          <Card.Meta\r\n                            textAlign={\r\n                              cm.user !== talkUser.userId ? 'right' : 'left'\r\n                            }\r\n                            style={{\r\n                              backgroundColor: 'whitesmoke',\r\n                              paddingTop: 0,\r\n                              paddingBottom: 0,\r\n                              marginTop: 0,\r\n                              marginBottom: 0,\r\n                            }}\r\n                          >\r\n                            {moment\r\n                              .unix(cm.timeStamp / 1000)\r\n                              .format('HH:mm DD/MM/YY')}\r\n                          </Card.Meta>\r\n                        </Card>\r\n                      </Grid.Column>\r\n                    </Grid>\r\n                  )\r\n                })}\r\n              </InfiniteScroll>\r\n            </div>\r\n          ) : (\r\n            <Spinner animation={'border'} />\r\n          )}\r\n        </Card.Content>\r\n        <Card.Content>\r\n          <Input\r\n            multiline\r\n            autoHeight\r\n            maxHeight={50}\r\n            ref={inputRef}\r\n            value={message}\r\n            onChange={(event) => setMessage(event.target.value)}\r\n            autofocus={true}\r\n            placeholder=\"Type Your Message Here\"\r\n            rightButtons={\r\n              <Button\r\n                disabled={!message}\r\n                primary\r\n                onClick={() => {\r\n                  socket.emit('TALK::SEND', {\r\n                    recipientUserId: talkUser.userId,\r\n                    message,\r\n                  })\r\n                  setMessage('')\r\n                  inputRef.current.input.value = ''\r\n                  inputRef.current.input.focus()\r\n                }}\r\n              >\r\n                Send\r\n              </Button>\r\n            }\r\n          />\r\n        </Card.Content>\r\n      </Card>\r\n    </Modal.Body>\r\n  )\r\n}\r\n\r\nexport default ChatTalk\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport { ChatList } from 'react-chat-elements'\r\nimport { Grid, Button } from 'semantic-ui-react'\r\nimport { Modal } from 'react-bootstrap'\r\n\r\nimport 'react-chat-elements/dist/main.css'\r\n\r\nimport socket from '../../socket'\r\n\r\nimport NewTalk from './NewTalk'\r\nimport ChatTalk from './ChatTalk'\r\n\r\nconst Talks = () => {\r\n  const [userId, setUserId] = useState()\r\n  const [talks, setTalks] = useState([])\r\n\r\n  const [modalOpen, setModalOpen] = useState(false)\r\n  const [modalType, setModalType] = useState(0)\r\n  const [talkId, setTalkId] = useState(null)\r\n  const [talkUser, setTalkUser] = useState(null)\r\n\r\n  const [newTalk, setNewTalk] = useState(null)\r\n\r\n  useEffect(() => {\r\n    socket.on('TALK::LIST', (data) => {\r\n      console.log('TALK::LIST :', data)\r\n      if (data.status) {\r\n        setUserId(data.userId)\r\n        setTalks([\r\n          ...data.talkData.sort((a, b) =>\r\n            a.lastActivity < b.lastActivity ? 1 : -1\r\n          ),\r\n        ])\r\n      } else {\r\n        // TODO: handle false\r\n      }\r\n    })\r\n\r\n    return () => {\r\n      socket.removeAllListeners('TALK::LIST')\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    socket.on('TALK::NEW', (data) => {\r\n      console.log('TALK::NEW :', data)\r\n      if (data.status) {\r\n        let { user, message, timeStamp } = data.messageData\r\n        setNewTalk({\r\n          user: user.userId,\r\n          message,\r\n          timeStamp,\r\n          talkId: data.talkId,\r\n        })\r\n      }\r\n    })\r\n\r\n    return () => {\r\n      socket.removeAllListeners('TALK::NEW')\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (newTalk) {\r\n      let isExists = talks.findIndex((talk) => talk.talkId === newTalk.talkId)\r\n      if (isExists !== -1) {\r\n        // update and sort\r\n        // let tempTalks = talks.map((talk) => {\r\n        //   if (talk.talkId === newTalk.talkId) {\r\n        //     talk.message = newTalk.message\r\n        //     talk.lastActivity = newTalk.timeStamp\r\n        //   }\r\n        //   return talk\r\n        // })\r\n        // setTalks([...tempTalks.sort((a, b) => a.timeStamp > b.timeStamp)])\r\n        console.log('inside ue :', newTalk, talkId, talks)\r\n        if (!talkId) {\r\n          setNewTalk(null)\r\n        } else {\r\n          if (talkId !== newTalk.talkId) {\r\n            setNewTalk(null)\r\n          }\r\n        }\r\n        // if (talkId && talkId !== newTalk.talkId) {\r\n        //   setNewTalk(null)\r\n        // }\r\n        socket.emit('TALK::LIST')\r\n      } else {\r\n        setNewTalk(null)\r\n        socket.emit('TALK::LIST')\r\n      }\r\n    }\r\n  }, [newTalk, talkId, talks])\r\n\r\n  useEffect(() => {\r\n    socket.emit('TALK::LIST')\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {modalOpen ? (\r\n        <Modal\r\n          show={true}\r\n          keyboard={false}\r\n          scrollable={true}\r\n          animation={false}\r\n          size={'xl'}\r\n        >\r\n          {modalType ? (\r\n            <NewTalk\r\n              userId={userId}\r\n              setModalOpen={setModalOpen}\r\n              setModalType={setModalType}\r\n              setTalkUser={setTalkUser}\r\n            />\r\n          ) : (\r\n            <ChatTalk\r\n              userId={userId}\r\n              talkId={talkId}\r\n              talkUser={talkUser}\r\n              newTalk={newTalk}\r\n              setTalkId={setTalkId}\r\n              setNewTalk={setNewTalk}\r\n              setModalOpen={setModalOpen}\r\n            />\r\n          )}\r\n        </Modal>\r\n      ) : null}\r\n      <Grid columns={1}>\r\n        <Grid.Column>\r\n          <Grid columns={1}>\r\n            <Grid.Column textAlign={'center'}>\r\n              <Button\r\n                primary\r\n                onClick={() => {\r\n                  setModalType(1)\r\n                  setModalOpen(true)\r\n                }}\r\n              >\r\n                New Talk\r\n              </Button>\r\n            </Grid.Column>\r\n          </Grid>\r\n          <hr />\r\n          <Grid columns={1}>\r\n            <Grid.Column>\r\n              {talks.length ? (\r\n                <ChatList\r\n                  onClick={(talk) => {\r\n                    setTalkId(talk.talkId)\r\n                    setTalkUser(talk.userData)\r\n                    setModalType(0)\r\n                    setModalOpen(true)\r\n                  }}\r\n                  dataSource={talks.map((talk) => {\r\n                    let recipientUser = talk.participant.find((user) => {\r\n                      return user.userId !== userId\r\n                    })\r\n                    return {\r\n                      avatar: recipientUser.userImage,\r\n                      alt:\r\n                        recipientUser.firstName + ' ' + recipientUser.lastName,\r\n                      title:\r\n                        recipientUser.firstName + ' ' + recipientUser.lastName,\r\n                      subtitle:\r\n                        talk.lastChat.message.length > 50\r\n                          ? talk.lastChat.message.slice(0, 50) + '....'\r\n                          : talk.lastChat.message,\r\n                      date: talk.lastActivity,\r\n                      talkId: talk.talkId,\r\n                      userData: recipientUser,\r\n                    }\r\n                  })}\r\n                />\r\n              ) : (\r\n                <Grid columns={1}>\r\n                  <Grid.Column textAlign={'center'}>\r\n                    <h3>{'Empty !'}</h3>\r\n                    <h3>{'Start New Talk ! 😁'}</h3>\r\n                  </Grid.Column>\r\n                </Grid>\r\n              )}\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Talks\r\n","import axios from 'axios'\r\n\r\nimport { baseUrl } from '../config'\r\n\r\nexport default axios.create({\r\n  baseURL: baseUrl,\r\n  withCredentials: true,\r\n})\r\n","import * as React from 'react'\r\nimport axios from '../../api'\r\n\r\nclass UploadNotes extends React.Component {\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault()\r\n    const file = event.target[2].files[0]\r\n    if (file.type !== 'application/pdf') {\r\n      alert('Please upload file in pdf format only!')\r\n      return\r\n    }\r\n    if (file.size > 100000000) {\r\n      alert('File size should not exceed 100MB!')\r\n      return\r\n    }\r\n    let formData = new FormData()\r\n    console.log(event)\r\n    formData.append('noteName', event.target[0].value)\r\n    formData.append('noteDescription', event.target[1].value)\r\n    formData.append('note', file)\r\n    const { data } = await axios.post('/notes/create', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    })\r\n    console.log(data)\r\n    this.props.handleClose()\r\n  }\r\n\r\n  handleCancel = () => {\r\n    this.props.handleClose()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ marginLeft: '10px' }}>\r\n        <h1 style={{ textAlign: 'center' }}>Add Notes</h1>\r\n        <form\r\n          className=\"ui form\"\r\n          style={{ width: '1000px', margin: '0 auto' }}\r\n          onSubmit={this.handleSubmit}\r\n        >\r\n          <label>\r\n            <h4>Subject:*</h4>\r\n          </label>\r\n          <br />\r\n          <input type=\"text\" style={{ width: '60%' }} required />\r\n          <br />\r\n          <br />\r\n          <label>\r\n            <h4>Optional Description:</h4>\r\n          </label>\r\n          <br />\r\n          <input type=\"text\" style={{ width: '90%' }} />\r\n          <br />\r\n          <br />\r\n          <label>\r\n            <h4>Notes File:(Please Upload file in PDF Format only)*</h4>\r\n          </label>\r\n          <input type=\"file\" accept=\".pdf\" style={{ width: '90%' }} required />\r\n          <br />\r\n          <br />\r\n          <br />\r\n\r\n          <input\r\n            type=\"submit\"\r\n            className=\"ui button primary\"\r\n            value=\"Upload\"\r\n            style={{\r\n              marginTop: '20px',\r\n              marginLeft: '10px',\r\n              marginBottom: '20px',\r\n            }}\r\n          />\r\n          <button\r\n            className=\"ui button negative\"\r\n            style={{\r\n              marginTop: '20px',\r\n              marginLeft: '20px',\r\n              marginBottom: '20px',\r\n            }}\r\n            onClick={() => this.handleCancel()}\r\n          >\r\n            Cancel\r\n          </button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default UploadNotes\r\n","import React from 'react'\r\nimport { Grid, Box } from '@material-ui/core'\r\n\r\nconst CentreButton = (props) => {\r\n  return (\r\n    <Grid className=\"home\">\r\n      <Grid item xs={12} className=\"gridItem\">\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n          {props.children}\r\n        </Box>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default CentreButton\r\n","// import React, { useState, useEffect } from 'react'\r\n// import { PDFObject } from 'react-pdfobject'\r\n// import Modal from 'react-bootstrap/Modal'\r\n// import { Card, Button, Icon, Grid } from 'semantic-ui-react'\r\n\r\n// import socket from '../../socket'\r\n// import UploadNotes from './UploadNotes'\r\n// import CentreButton from '../CentreButton'\r\n// import { baseUrl } from '../../config'\r\n// import axios from '../../api'\r\n\r\n// const Notes = () => {\r\n//   const [notes, setNotes] = useState([])\r\n//   const [open, setOpen] = useState(false)\r\n//   const [noteId, setNoteId] = useState(null)\r\n\r\n//   useEffect(() => {\r\n//     socket.on('NOTE::NEW', (data) => {\r\n//       console.log('NOTE::NEW :', data)\r\n//       if (data.status) {\r\n//         setNotes([data.noteData, ...notes])\r\n//       } else {\r\n//         // TODO: handle false\r\n//       }\r\n//     })\r\n\r\n//     return () => {\r\n//       socket.removeAllListeners('NOTE::NEW')\r\n//     }\r\n//   }, [notes])\r\n\r\n//   useEffect(() => {\r\n//     ;(async () => {\r\n//       const { data } = await axios.post('/notes/list')\r\n//       console.log('/notes/list :', data)\r\n//       if (data.status) {\r\n//         setNotes([...data.noteData])\r\n//       } else {\r\n//         // TODO: handle false\r\n//       }\r\n//     })()\r\n//   }, [])\r\n\r\n//   return (\r\n//     <>\r\n//       <CentreButton>\r\n//         <Button primary onClick={() => setOpen(true)}>\r\n//           <Icon name={'add'} /> <h4>Upload Notes</h4>\r\n//         </Button>\r\n//       </CentreButton>\r\n//       <Modal show={open} backdrop={true} keyboard={false} animation={false}>\r\n//         <Modal.Body>\r\n//           <UploadNotes handleClose={setOpen} />\r\n//         </Modal.Body>\r\n//       </Modal>\r\n//       <Modal\r\n//         show={noteId !== null}\r\n//         keyboard={false}\r\n//         animation={false}\r\n//         size={'lg'}\r\n//         dialogClassName=\"modal-90w\"\r\n//       >\r\n//         <Modal.Body>\r\n//           <Grid columns={1}>\r\n//             <Grid.Column>\r\n//               <Grid.Row>\r\n//                 <PDFObject\r\n//                   width={'100%'}\r\n//                   height={'500px'}\r\n//                   url={baseUrl + '/notes/get/' + noteId}\r\n//                 />\r\n//               </Grid.Row>\r\n//               <Grid.Row>\r\n//                 <Button\r\n//                   color={'red'}\r\n//                   onClick={() => {\r\n//                     setNoteId(null)\r\n//                   }}\r\n//                   style={{\r\n//                     marginLeft: 'auto',\r\n//                     marginRight: 'auto',\r\n//                     width: '50%',\r\n//                   }}\r\n//                 >\r\n//                   Close\r\n//                 </Button>\r\n//               </Grid.Row>\r\n//             </Grid.Column>\r\n//           </Grid>\r\n//         </Modal.Body>\r\n//       </Modal>\r\n//       <div\r\n//         style={{\r\n//           backgroundColor: 'whitesmoke',\r\n//           padding: '10px',\r\n//           display: 'flex',\r\n//           flexDirection: 'column',\r\n//           alignItems: 'center',\r\n//           overflow: false,\r\n//         }}\r\n//       >\r\n//         {notes.map((note) => {\r\n//           let noteTitle = note.noteName\r\n//           if (noteTitle.length > 100) {\r\n//             noteTitle = noteTitle.slice(0, 100) + '...'\r\n//           }\r\n//           return (\r\n//             <Card\r\n//               color=\"red\"\r\n//               style={{\r\n//                 width: '60%',\r\n//                 display: 'flex',\r\n//               }}\r\n//             >\r\n//               <Card.Content header={noteTitle} />\r\n//               <Card.Description>\r\n//                 <Grid columns=\"two\">\r\n//                   <Grid.Column textAlign={'center'}>\r\n//                     <Grid.Row>\r\n//                       <Button\r\n//                         variant=\"contained\"\r\n//                         onClick={() => setNoteId(note.noteId)}\r\n//                         size={'medium'}\r\n//                         style={{ width: '80%' }}\r\n//                       >\r\n//                         View / Download Notes\r\n//                       </Button>\r\n//                     </Grid.Row>\r\n//                   </Grid.Column>\r\n//                 </Grid>\r\n//               </Card.Description>\r\n//             </Card>\r\n//           )\r\n//         })}\r\n//         <div style={{ textAlign: 'center' }}>\r\n//           <b>Yay! You have seen it all</b>\r\n//         </div>\r\n//       </div>\r\n//     </>\r\n//   )\r\n// }\r\n\r\n// export default Notes\r\nimport React, { useState, useEffect } from 'react'\r\nimport { PDFObject } from 'react-pdfobject'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport { Card, Button, Icon, Grid } from 'semantic-ui-react'\r\n\r\nimport socket from '../../socket'\r\nimport UploadNotes from './UploadNotes'\r\nimport CentreButton from '../CentreButton'\r\nimport { baseUrl } from '../../config'\r\nimport axios from '../../api'\r\n\r\nconst Notes = () => {\r\n  const [notes, setNotes] = useState([])\r\n  const [open, setOpen] = useState(false)\r\n  const [noteId, setNoteId] = useState(null)\r\n\r\n  useEffect(() => {\r\n    socket.on('NOTE::NEW', (data) => {\r\n      console.log('NOTE::NEW :', data)\r\n      if (data.status) {\r\n        setNotes([data.noteData, ...notes])\r\n      } else {\r\n        // TODO: handle false\r\n      }\r\n    })\r\n\r\n    return () => {\r\n      socket.removeAllListeners('NOTE::NEW')\r\n    }\r\n  }, [notes])\r\n\r\n  useEffect(() => {\r\n    ;(async () => {\r\n      const { data } = await axios.post('/notes/list')\r\n      console.log('/notes/list :', data)\r\n      if (data.status) {\r\n        setNotes([...data.noteData])\r\n      } else {\r\n        // TODO: handle false\r\n      }\r\n    })()\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <Modal show={open} backdrop={true} keyboard={false} animation={false}>\r\n        <Modal.Body>\r\n          <UploadNotes handleClose={setOpen} />\r\n        </Modal.Body>\r\n      </Modal>\r\n      <Modal\r\n        show={noteId !== null}\r\n        // fullscreen={true}\r\n        keyboard={false}\r\n        animation={false}\r\n        size={'lg'}\r\n        // style={{ width: '100%' }}\r\n        dialogClassName=\"modal-90w\"\r\n      >\r\n        <Modal.Body>\r\n          <Grid columns={1}>\r\n            <Grid.Column>\r\n              <Grid.Row>\r\n                <PDFObject\r\n                  width={'100%'}\r\n                  height={'500px'}\r\n                  url={baseUrl + '/notes/get/' + noteId}\r\n                />\r\n              </Grid.Row>\r\n              <Grid.Row>\r\n                <Button\r\n                  color={'red'}\r\n                  onClick={() => {\r\n                    setNoteId(null)\r\n                  }}\r\n                  style={{\r\n                    marginLeft: 'auto',\r\n                    marginRight: 'auto',\r\n                    width: '50%',\r\n                  }}\r\n                >\r\n                  Close\r\n                </Button>\r\n              </Grid.Row>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Modal.Body>\r\n      </Modal>\r\n      <CentreButton>\r\n        <Button\r\n          primary\r\n          onClick={() => setOpen(true)}\r\n          style={{ marginBottom: 10 }}\r\n        >\r\n          <Icon name={'add'} /> <h4>Upload Notes</h4>\r\n        </Button>\r\n      </CentreButton>\r\n      <div\r\n        style={{\r\n          backgroundColor: 'whitesmoke',\r\n          padding: '10px',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          alignItems: 'center',\r\n          overflow: false,\r\n        }}\r\n      >\r\n        {notes.map((note) => {\r\n          let noteTitle = note.noteName\r\n          if (noteTitle.length > 100) {\r\n            noteTitle = noteTitle.slice(0, 100) + '...'\r\n          }\r\n          return (\r\n            <Card\r\n              key={note.noteId}\r\n              color=\"red\"\r\n              style={{\r\n                width: '60%',\r\n                display: 'flex',\r\n              }}\r\n            >\r\n              <Card.Content textAlign={'center'} header={noteTitle} />\r\n              <Card.Description>\r\n                <Grid columns=\"one\">\r\n                  <Grid.Column textAlign={'center'}>\r\n                    <Grid.Row textAlign={'center'} style={{ width: '60%' }}>\r\n                      <span>{note.noteDescription}</span>\r\n                    </Grid.Row>\r\n                  </Grid.Column>\r\n                </Grid>\r\n              </Card.Description>\r\n              <Card.Content>\r\n                <Grid columns={1}>\r\n                  <Grid.Column textAlign={'center'}>\r\n                    <Button\r\n                      color={'grey'}\r\n                      variant=\"contained\"\r\n                      onClick={() => setNoteId(note.noteId)}\r\n                      size={'medium'}\r\n                      style={{ width: '80%' }}\r\n                    >\r\n                      View / Download Notes\r\n                    </Button>\r\n                  </Grid.Column>\r\n                </Grid>\r\n              </Card.Content>\r\n            </Card>\r\n          )\r\n        })}\r\n      </div>\r\n    </>\r\n    // <div>\r\n    // <CentreButton>\r\n    //   <Button primary onClick={() => setOpen(true)}>\r\n    //     <Icon name={'add'} /> <h4>Upload Notes</h4>\r\n    //   </Button>\r\n    // </CentreButton>\r\n    //   {open ? (\r\n    //     <Modal show={open} keyboard={false} animation={false}>\r\n    //       <UploadNotes handleClose={setOpen} />\r\n    //     </Modal>\r\n    //   ) : null}\r\n    //   {notes.map((note) => {\r\n    //     return (\r\n    //       <Card>\r\n    //         <h1>{note.noteName}</h1>\r\n    //         <h2>{note.noteDescription}</h2>\r\n    // <PDFObject\r\n    //   height={'500px'}\r\n    //   url={baseUrl + '/notes/get/' + note.noteId}\r\n    // />\r\n    //       </Card>\r\n    //     )\r\n    //   })}\r\n    // </div>\r\n  )\r\n}\r\n\r\nexport default Notes\r\n","import React, { useEffect } from 'react'\r\n\r\nconst Logout = (props) => {\r\n  useEffect(() => {\r\n    props.logout()\r\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return <></>\r\n}\r\n\r\nexport default Logout\r\n","import * as React from 'react'\r\n\r\nimport { Tabs, Tab, Box, Typography } from '@mui/material'\r\nimport { Container, Modal, Spinner } from 'react-bootstrap'\r\n\r\nimport Blogs from '../Blogs'\r\nimport Talks from '../Talks'\r\nimport Notes from '../Notes'\r\nimport Logout from '../Logout'\r\n\r\nimport socket from '../../socket'\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    'aria-controls': `simple-tabpanel-${index}`,\r\n  }\r\n}\r\n\r\nclass BasicTabs extends React.Component {\r\n  state = {\r\n    value: 0,\r\n    isOnline: false,\r\n    showModal: false,\r\n    modalProps: {\r\n      fullscreen: true,\r\n    },\r\n    modalContent: null,\r\n  }\r\n\r\n  openModal = (modalContent) => {\r\n    this.setState({\r\n      showModal: true,\r\n      modalContent,\r\n    })\r\n  }\r\n\r\n  closeModal = () => {\r\n    this.setState({\r\n      showModal: false,\r\n      modalContent: null,\r\n    })\r\n  }\r\n\r\n  handleChange = (event, newValue) => {\r\n    this.setState({\r\n      value: newValue,\r\n    })\r\n  }\r\n\r\n  timeoutRef = null\r\n  componentDidMount() {\r\n    const onConnect = () => {\r\n      this.timeoutRef && clearInterval(this.timeoutRef)\r\n      console.log('connected')\r\n      this.setState({\r\n        isOnline: true,\r\n      })\r\n    }\r\n\r\n    const onDisconnect = () => {\r\n      console.log('disconnected')\r\n      this.setState({\r\n        isOnline: false,\r\n      })\r\n      this.timeoutRef = setInterval(() => {\r\n        socket.connect()\r\n        console.log('connect called in loader')\r\n      }, 3000)\r\n    }\r\n\r\n    socket.on('connect', onConnect)\r\n    socket.on('disconnect', onDisconnect)\r\n    socket.on('error', () => window.location.reload())\r\n\r\n    socket.connect()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.timeoutRef && clearInterval(this.timeoutRef)\r\n\r\n    socket.removeAllListeners('disconnect')\r\n    socket.disconnect()\r\n\r\n    socket.removeAllListeners('connect')\r\n\r\n    socket.removeAllListeners('error')\r\n  }\r\n\r\n  render() {\r\n    const value = this.state.value\r\n    return (\r\n      <>\r\n        {!this.state.isOnline ? (\r\n          <Modal show={true} fullscreen={true}>\r\n            <Container\r\n              fluid={'xxl'}\r\n              className={'h-100'}\r\n              style={{\r\n                display: 'flex',\r\n                height: '100%',\r\n                justifyItems: 'center',\r\n                alignItems: 'center',\r\n              }}\r\n            >\r\n              <Spinner\r\n                style={{ margin: 'auto' }}\r\n                animation={'border'}\r\n                variant={'dark'}\r\n              />\r\n            </Container>\r\n          </Modal>\r\n        ) : null}\r\n        {this.state.showModal ? (\r\n          <Modal\r\n            show={true}\r\n            fullscreen={this.state.modalProps.fullscreen}\r\n            children={this.state.modalContent}\r\n            scrollable={true}\r\n            animation={false}\r\n          />\r\n        ) : null}\r\n        <Box sx={{ width: '100%' }}>\r\n          <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n            <Tabs\r\n              value={value}\r\n              onChange={this.handleChange}\r\n              aria-label=\"basic tabs example\"\r\n              centered\r\n            >\r\n              <Tab label=\"Posts\" {...a11yProps(0)} />\r\n\r\n              <Tab label=\"Talks\" {...a11yProps(1)} />\r\n              <Tab label=\"Notes\" {...a11yProps(2)} />\r\n              <Tab label=\"Sign Out\" {...a11yProps(3)} />\r\n            </Tabs>\r\n          </Box>\r\n          <TabPanel value={value} index={0}>\r\n            <Blogs\r\n              displayNotification={this.props.displayNotification}\r\n              modalOperations={{\r\n                openModal: this.openModal,\r\n                closeModal: this.closeModal,\r\n              }}\r\n            />\r\n          </TabPanel>\r\n\r\n          <TabPanel value={value} index={1}>\r\n            <Talks />\r\n          </TabPanel>\r\n          <TabPanel value={value} index={2}>\r\n            <Notes />\r\n          </TabPanel>\r\n          <TabPanel value={value} index={3}>\r\n            <Logout logout={this.props.logout} />\r\n          </TabPanel>\r\n        </Box>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BasicTabs\r\n","export default __webpack_public_path__ + \"static/media/colab.3986cea1.jpg\";","import React from 'react'\r\nimport { Typography, Grid, Box } from '@material-ui/core'\r\nimport GoogleLogin from 'react-google-login'\r\n\r\nimport { clientId } from '../../config'\r\nimport Logo from '../../assets/colab.jpg'\r\n\r\nconst Login = (props) => {\r\n  return (\r\n    <Grid className=\"home\">\r\n      <Grid item xs={12} className=\"gridItem\">\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n          <Typography variant=\"h3\">\r\n            <br />\r\n            <br />\r\n            <i>\r\n              <b>Welcome to Engage!</b>\r\n            </i>\r\n          </Typography>\r\n        </Box>\r\n      </Grid>\r\n      <br />\r\n      <br />\r\n      <Grid item xs={12} className=\"gridItem\">\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n          <Typography variant=\"h5\" color=\"textSecondary\">\r\n            <img src={Logo} alt=\"Logo\" />\r\n          </Typography>\r\n        </Box>\r\n      </Grid>\r\n      <br />\r\n      <br />\r\n      <Grid item xs={12} className=\"gridItem\">\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n          <GoogleLogin\r\n            clientId={clientId}\r\n            buttonText={'Sign In With Google'}\r\n            onSuccess={props.login}\r\n            onFailure={(err) => console.log('GoogleLogin :', err)}\r\n            cookiePolicy={'single_host_origin'}\r\n          />\r\n        </Box>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","import React, { useState, useEffect } from 'react'\r\nimport Home from './components/Home'\r\nimport Login from './components/Login'\r\nimport axios from './api'\r\n\r\nimport { Alert, Snackbar } from '@mui/material'\r\nimport { Spinner, Container } from 'react-bootstrap'\r\n\r\n// TODO: remove\r\nwindow.axios = axios\r\nlet serverUrl = 'https://localhost:5000/'\r\nfunction postRequest(path, data, callback) {\r\n  let config = {\r\n    method: 'post',\r\n    url: serverUrl + path,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    data: data || JSON.stringify({ data: 'test' }),\r\n  }\r\n\r\n  axios(config)\r\n    .then(function (response) {\r\n      console.log(`/${path} :`, response.data)\r\n      if (callback) {\r\n        callback(response.data)\r\n      }\r\n    })\r\n    .catch(function (error) {\r\n      console.log(`/${path} :`, error)\r\n    })\r\n}\r\nfunction flogin() {\r\n  let data = JSON.stringify({\r\n    ga_token: 'https://cataas.com/cat',\r\n    user: {\r\n      emailAddress: '1@gmail.com',\r\n      firstName: 'Roy',\r\n      lastName: 'Mustang',\r\n      userImage: 'https://cataas.com/cat',\r\n    },\r\n  })\r\n  postRequest('google_auth', data, (res) => console.log)\r\n}\r\nwindow.login = flogin\r\n\r\nconst App = () => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\r\n  const [notification, setNotification] = useState({ open: false })\r\n  const [isSessionChecked, setIsSessionChecked] = useState(false)\r\n\r\n  useEffect(() => {\r\n    checkSession()\r\n  }, [])\r\n\r\n  const checkSession = () => {\r\n    axios\r\n      .post('/ref_session', '')\r\n      .then((response) => {\r\n        console.log(`/ref_session :`, response.data)\r\n        setIsSessionChecked(true)\r\n        if (response.data.status) {\r\n          setIsAuthenticated(true)\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setIsSessionChecked(true)\r\n        console.log('/ref_session :', err)\r\n      })\r\n  }\r\n\r\n  // TODO: handle catch\r\n  const login = async (googleAuthResponse) => {\r\n    try {\r\n      const { data } = await axios.post('/google_auth', {\r\n        ga_token: googleAuthResponse.tokenId,\r\n      })\r\n      console.log(`/google_auth :`, data)\r\n      if (data.status) {\r\n        setIsAuthenticated(true)\r\n      }\r\n    } catch (err) {\r\n      console.log('/google_auth :', err)\r\n    }\r\n  }\r\n\r\n  // TODO: handle catch\r\n  const logout = async () => {\r\n    try {\r\n      const { data } = await axios.post('/logout', '')\r\n      console.log(`/logout :`, data)\r\n      if (data.status) {\r\n        setIsAuthenticated(false)\r\n      }\r\n    } catch (err) {\r\n      console.log('/logout :', err)\r\n    }\r\n  }\r\n\r\n  const displayNotification = (severity, message, autoHideDuration = 5000) => {\r\n    setNotification({\r\n      open: true,\r\n      message,\r\n      severity,\r\n      autoHideDuration,\r\n    })\r\n  }\r\n\r\n  // return !isSessionChecked ? (\r\n  //   <div style={{ alignText: 'center' }}>\r\n  //     <Spinner animation={'border'} variant={'dark'} />\r\n  //   </div>\r\n  // ) : (\r\n  //   <></>\r\n  // )\r\n\r\n  return (\r\n    <>\r\n      {isSessionChecked ? (\r\n        isAuthenticated ? (\r\n          <Home logout={logout} displayNotification={displayNotification} />\r\n        ) : (\r\n          <Login login={login} displayNotification={displayNotification} />\r\n        )\r\n      ) : (\r\n        <Container\r\n          fluid={'xxl'}\r\n          className={'h-100'}\r\n          style={{\r\n            display: 'flex',\r\n            height: '100%',\r\n            justifyItems: 'center',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Spinner\r\n            style={{ margin: 'auto' }}\r\n            animation={'border'}\r\n            variant={'dark'}\r\n          />\r\n        </Container>\r\n      )}\r\n\r\n      {notification.open ? (\r\n        <Snackbar\r\n          open={true}\r\n          autoHideDuration={notification.autoHideDuration}\r\n          onClose={() => setNotification({ open: false })}\r\n        >\r\n          <Alert severity={notification.severity} sx={{ width: '100%' }}>\r\n            {notification.message}\r\n          </Alert>\r\n        </Snackbar>\r\n      ) : null}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'))\r\n"],"sourceRoot":""}